#define GLM_ENABLE_EXPERIMENTAL
#include "../include/player.h"
#include "../include/bullet.h"
#include "../include/glm/gtx/quaternion.hpp"
#include "../include/glm/gtx/string_cast.hpp"
#include "../include/key.h"

const glm::vec3 CAMERA_POSITION = glm::vec3(0.0f, 0.0f, 3.0f);
const glm::vec3 CAMERA_FRONT = glm::vec3(0.0f, 0.0f, -1.0f);
const glm::vec3 CAMERA_UP = glm::vec3(0.0f, 1.0f, 0.0f);
const glm::vec3 CAMERA_RIGHT = glm::vec3(1.0f, 0.0f, 0.0f);

const float SPEED = 1.0f;
const float MAX_SPEED = 300.0f;
const float TURN_SPEED = 100.0f;
const float SENSITIVITY = 0.2f;
const float FOV = 45.0f;

const float DRAG_RATE = 0.2f;
const float BRAKE_STRENGTH = 0.2f;
const float ACCELERATION = 0.2f;

const glm::quat CAMERA_ORIENTATION = glm::quat(1, 0, 0, 0);

Player::Player(glm::vec3 positionIn, glm::vec3 worldUpIn, glm::vec3 frontIn,
               glm::quat orientationIn, float speedIn, float maxSpeedIn,
               float turnSpeedIn, float sensitivityIn, float fovIn) {
  position = positionIn;
  worldUp = worldUpIn;
  front = frontIn;
  orientation = orientationIn;
  speed = speedIn;
  maxSpeed = maxSpeedIn;
  turnSpeed = turnSpeedIn;
  sensitivity = sensitivityIn;

  fov = fovIn;
  viewDirection = 1;

  updateCamera();
}

glm::mat4 Player::getViewMatrix(glm::vec3 bossPosition) {
  glm::mat4 view = glm::mat4_cast(glm::conjugate(orientation));
  // model = glm::rotate(model, timePassed * 3.0f,
  //                     glm::normalize(glm::vec3(2.0f, 0.0f, 1.0)));

  glm::vec3 cameraUp = glm::normalize(orientation * CAMERA_UP);
  if (viewDirection == 2) {
    view = glm::rotate(view, float(M_PI), cameraUp);
  }
  if (viewDirection == 3) {
    view = glm::lookAt(position, bossPosition, cameraUp);
  }

  if (viewDirection != 3)
    view = glm::translate(view, -position);

  return view;
}

void Player::handleKeyboardInput(GLFWwindow *window, float dt) {

  float cameraSpeed = turnSpeed * dt;
  float xOffset = 0.0f;
  float yOffset = 0.0f;
  float zOffset = 0.0f;

  if (glfwGetKey(window, FORWARD_KEY) == GLFW_PRESS) {
    speed += addSpeed(speed, maxSpeed, ACCELERATION, dt);
  }

  if (glfwGetKey(window, BACKWARD_KEY) == GLFW_PRESS) {
    speed += subtractSpeed(speed, BRAKE_STRENGTH, dt);
    if (speed < 0.0f) {
      speed = 0.0f;
    }
  }

  if (glfwGetKey(window, PITCH_UP_KEY) == GLFW_PRESS) {
    yOffset += cameraSpeed;
  }
  if (glfwGetKey(window, PITCH_DOWN_KEY) == GLFW_PRESS) {
    yOffset -= cameraSpeed;
  }

  if (glfwGetKey(window, ROLL_RIGHT_KEY) == GLFW_PRESS) {
    zOffset += cameraSpeed * 1.5f;
  }
  if (glfwGetKey(window, ROLL_LEFT_KEY) == GLFW_PRESS) {
    zOffset -= cameraSpeed * 1.53;
  }

  if (glfwGetKey(window, YAW_LEFT_KEY) == GLFW_PRESS) {
    xOffset -= cameraSpeed * 0.5f;
  }
  if (glfwGetKey(window, YAW_RIGHT_KEY) == GLFW_PRESS) {
    xOffset += cameraSpeed * 0.5f;
  }

  if (glfwGetKey(window, SHOOT_KEY) == GLFW_PRESS) {
    shootBullet();

    if (weapon == chargeRifle) {
      shootCounter += dt;
    }
  } else {
    if (weapon == chargeRifle)
      shootChargeRifle();
  }

  if (glfwGetKey(window, CAMERA_BACK_KEY) == GLFW_PRESS) {
    viewDirection = 2;
  } else if (glfwGetKey(window, CAMERA_BOSS_KEY) == GLFW_PRESS) {
    viewDirection = 3;
  } else {
    viewDirection = 1;
  }

  if (glfwGetKey(window, MACHINE_GUN_KEY) == GLFW_PRESS) {
    weapon = machineGun;
  } else if (glfwGetKey(window, SHOTGUN_KEY) == GLFW_PRESS) {
    weapon = shotGun;
  } else if (glfwGetKey(window, HOMING_MISSILE_KEY) == GLFW_PRESS) {
    weapon = homingMissile;
  } else if (glfwGetKey(window, BOMB_LAUNCHER_KEY) == GLFW_PRESS) {
    weapon = bombLauncher;
  } else if (glfwGetKey(window, CHARGE_RIFLE_KEY) == GLFW_PRESS) {
    weapon = chargeRifle;
  }

  float yawAngle = -xOffset * cameraSpeed;
  float pitchAngle = -yOffset * cameraSpeed * 0.5;
  float rollAngle = zOffset * cameraSpeed;

  glm::vec3 cameraFront = glm::normalize(orientation * CAMERA_FRONT);
  glm::vec3 cameraRight = glm::normalize(orientation * CAMERA_RIGHT);
  glm::vec3 cameraUp = glm::normalize(orientation * CAMERA_UP);

  glm::quat qYaw = glm::angleAxis(glm::radians(yawAngle), cameraUp);
  glm::quat qPitch = glm::angleAxis(glm::radians(pitchAngle), cameraRight);
  glm::quat qRoll = glm::angleAxis(glm::radians(rollAngle), cameraFront);

  orientation = glm::normalize(qRoll * qYaw * qPitch * orientation);

  updateCamera();
}

// void Player::handleMouseInput(float xOffset, float yOffset, bool constrain) {
// float yawAngle = -xOffset * sensitivity;
//
// float pitchAngle = yOffset * sensitivity;
//
// glm::quat qYaw = glm::angleAxis(glm::radians(yawAngle), worldUp);
// glm::vec3 cameraFront = glm::rotate(orientation, CAMERA_FRONT);
// glm::vec3 cameraRight =
//     glm::normalize(glm::cross(cameraFront, worldUp));
//
// glm::quat qPitch = glm::angleAxis(glm::radians(pitchAngle),cameraRight);
//
// orientation = glm::normalize(qYaw * qPitch * orientation);
//
// updateCamera();
// }

// void Camera::handleScrollInput(float yOffset, float minFov, float maxFov) {
//   fov -= yOffset;
//
//   if (fov > maxFov) {
//     fov = maxFov;
//   }
//   if (fov < minFov) {
//     fov = minFov;
//   }
// }

void Player::update(float dt) {
  updateCameraMovement(dt);
  if (weapon != chargeRifle)
    shootCounter += dt;
}

void Player::updateCamera() {
  front = glm::normalize(orientation * CAMERA_FRONT);
  right = glm::normalize(glm::cross(front, worldUp));
  up = glm::normalize(glm::cross(right, front));
}

void Player::updateCameraMovement(float dt) {
  front = glm::normalize(orientation * CAMERA_FRONT);

  speed += applyDrag(speed, DRAG_RATE, dt);

  fov = 45.0f + (speed / maxSpeed) * 20.0f;

  float vel = speed;

  position += front * dt * vel;
}

float Player::addSpeed(float currentSpeed, float maxSpeed, float acceleration,
                       float dt) {
  float dSpeed = maxSpeed - currentSpeed;
  return acceleration * dSpeed * dt;
}

float Player::subtractSpeed(float currentSpeed, float brakeStrength, float dt) {
  return -brakeStrength * currentSpeed * dt;
}

float Player::applyDrag(float currentSpeed, float dragRate, float dt) {
  return -dragRate * currentSpeed * dt;
}

void Player::shootBullet() {
  switch (weapon) {
  case machineGun:
    shootMachineGun();
    break;
  case shotGun:
    shootShotGun();
    break;
  case homingMissile:
    break;
  case bombLauncher:
    shootBombLauncher();
    break;
  }
}

ShootArgs Player::getShootArgs(float bulletSpread) {
  ShootArgs shootArgs;

  glm::vec3 cameraUp = glm::normalize(orientation * CAMERA_UP);
  glm::vec3 cameraRight = glm::normalize(orientation * CAMERA_RIGHT);

  glm::vec3 direction = glm::normalize(orientation * CAMERA_FRONT);
  direction.x += ((float(rand() % 100) / 100.0) - 0.5) / bulletSpread;
  direction.y += ((float(rand() % 100) / 100.0) - 0.5) / bulletSpread;
  direction.z += ((float(rand() % 100) / 100.0) - 0.5) / bulletSpread;

  glm::vec3 bulletPosition = glm::vec3(0.0f);
  float spin = -1.0f;

  if (leftGun) {
    bulletPosition = position + cameraUp * -2.0f + cameraRight * -1.0f;
    spin = 1.0;
    leftGun = false;

  } else {
    bulletPosition = position + cameraUp * -2.0f + cameraRight * 1.0f;
    leftGun = true;
  }

  shootArgs.bulletPosition = bulletPosition;
  shootArgs.direction = direction;
  shootArgs.spin = spin;

  return shootArgs;
}

void Player::shootMachineGun() {
  if (shootCounter < MACHINE_GUN_COOLDOWN)
    return;
  shootCounter = 0.0f;

  glm::vec3 scale = glm::vec3(MACHINE_GUN_BULLET_SIZE);
  glm::vec3 color = glm::vec3(1.0f);

  ShootArgs shootArgs = getShootArgs(MACHINE_GUN_SPREAD);

  Projectile projectile;
  projectile.bullet = std::make_unique<Bullet>(
      shootArgs.bulletPosition, shootArgs.spin * shootArgs.direction,
      shootArgs.direction, scale, color, MACHINE_GUN_SPEED, MACHINE_GUN_DAMAGE);
  projectiles.push_back(std::move(projectile));
}

void Player::shootShotGun() {
  if (shootCounter < SHOTGUN_COOLDOWN)
    return;
  shootCounter = 0.0f;

  glm::vec3 scale = glm::vec3(SHOTGUN_BULLET_SIZE);
  glm::vec3 color = glm::vec3(1.0f);

  for (unsigned int i = 0; i < 25; i++) {
    ShootArgs shootArgs = getShootArgs(SHOTGUN_SPREAD);
    Projectile projectile;
    projectile.bullet = std::make_unique<Bullet>(
        shootArgs.bulletPosition, shootArgs.spin * shootArgs.direction,
        shootArgs.direction, scale, color, SHOTGUN_SPEED, SHOTGUN_DAMAGE);
    projectiles.push_back(std::move(projectile));
  }
}

void Player::shootBombLauncher() {
  if (shootCounter < BOMB_LAUNCHER_COOLDOWN)
    return;

  shootCounter = 0.0f;

  glm::vec3 scale = glm::vec3(BOMB_LAUNCHER_BULLET_SIZE);
  glm::vec3 color = glm::vec3(1.0f);

  ShootArgs shootArgs = getShootArgs(BOMB_LAUNCHER_SPREAD);

  Projectile projectile;
  projectile.bombBullet = std::make_unique<BombBullet>(
      shootArgs.bulletPosition, shootArgs.spin * shootArgs.direction,
      shootArgs.direction, scale, color, BOMB_LAUNCHER_SPEED,
      BOMB_LAUNCHER_DAMAGE, BOMB_LAUNCHER_EXPLOSION_TIMER);
  projectiles.push_back(std::move(projectile));
}

void Player::shootChargeRifle() {
  float holdAmount = 0.0f;
  float k = 4.0f;
  bool full = false;

  if (shootCounter > CHARGE_RIFLE_COOLDOWN) {
    full = true;
  } else if (shootCounter > CHARGE_RIFLE_COOLDOWN / 100.0) {
  } else {
    return;
  }

  holdAmount = glm::clamp(shootCounter / CHARGE_RIFLE_COOLDOWN, 0.0f, 1.0f);
  float num = exp(k * holdAmount) - 1;
  float denom = exp(k) - 1;
  float charge = (1.0f + (exp(k * holdAmount) - 1.0f));

  shootCounter = 0.0f;

  glm::vec3 cameraUp = glm::normalize(orientation * CAMERA_UP);
  glm::vec3 cameraRight = glm::normalize(orientation * CAMERA_RIGHT);

  glm::vec3 direction = glm::normalize(orientation * CAMERA_FRONT);
  glm::vec3 bulletPosition = glm::vec3(0.0f);
  bulletPosition = position + cameraUp * -2.0f;

  glm::vec3 scale = glm::vec3(CHARGE_RIFLE_BULLET_SIZE) * charge;
  if (full) {
    scale *= 2.0f;
  }
  glm::vec3 color = glm::vec3(1.0f);

  float speed = CHARGE_RIFLE_SPEED * charge;
  float damage = CHARGE_RIFLE_DAMAGE * charge;

  Projectile projectile;
  projectile.bullet = std::make_unique<Bullet>(
      bulletPosition, cameraRight, direction, scale, color, speed, damage);
  projectiles.push_back(std::move(projectile));
}
